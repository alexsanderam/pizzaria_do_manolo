package pizzariaDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import dominio.EnumFormaDePagamento;
import dominio.Pagamento;
import dominio.Pedido;
import excecoes.ExcecaoDAO;
import excecoes.ExcecaoDePagamento;

public class PagamentoDAOConcreto implements PagamentoDAO {
	
    private Connection conexao;
    
    
    public PagamentoDAOConcreto() throws ExcecaoDAO {
        conexao = criarConexao();
    }
     
     
    protected Connection criarConexao() throws ExcecaoDAO{
        return ConnectionFactoryConcreto.obterInstancia().obterConexao();
    }
     

	@Override
	public void incluir(Pagamento pagamento) throws ExcecaoDAO,	ExcecaoDePagamento {
	       if(conexao == null)
	            throw new ExcecaoDAO("pagamento_dao.conexao_nao_estabelecida");
	         
	        String sql = "INSERT INTO pizzaria.Pagamento(forma_de_pagamento, valor_recebido) values (?, ?) RETURNING id;";
	        PreparedStatement stmt;
	        ResultSet rs;
	         
	        try {
	            stmt = conexao.prepareStatement(sql);

	            stmt.setString(1, pagamento.obterFormaDePagamento().name());
	            stmt.setFloat(2, pagamento.obterValorRecebido());
	             
	            rs = stmt.executeQuery();
	             
	            if (rs.next()){
	                pagamento.definirId(rs.getLong("id"));
	            }
	             
	        } catch (SQLException e) {
	 
	            throw new ExcecaoDAO("pagamento_dao.nao_foi_possivel_incluir_o_pagamento", e);
	        }
	}


	@Override
	public Pagamento buscar(Long id) throws ExcecaoDAO, ExcecaoDePagamento {
        if(conexao == null)
            throw new ExcecaoDAO("pagamento_dao.conexao_nao_estabelecida");
         
        Pagamento pagamento = null;
 
        String sql = "SELECT * FROM pizzaria.Pagamento WHERE id = ?";
        PreparedStatement stmt;
        ResultSet rs;
         
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setLong(1, id);
             
            rs = stmt.executeQuery();
            
            PedidoDAO pedidoDAO = new PedidoDAOConcreto();
             
            if (rs.next()){
            	Long id_pedido = rs.getLong("id_pedido_fk");
            	Pedido pedido = pedidoDAO.buscar(id_pedido);
            			
            	EnumFormaDePagamento formaDePagamento = EnumFormaDePagamento.valueOf(rs.getString("forma_de_pagamento"));
            	Float valorRecebido = rs.getFloat("valor_recebido");
            	
                pagamento = Pagamento.novoPagamento(pedido, formaDePagamento, valorRecebido);
                pagamento.definirId(rs.getLong("id"));
            }
             
        } catch (SQLException e) {
 
            throw new ExcecaoDAO("pagamento_dao.nao_foi_possivel_localizar_o_pagamento", e);
        }
        
        if(pagamento == null)
        	throw new ExcecaoDAO("pagamento_dao.nao_foi_possivel_localizar_o_pagamento");
         
        return pagamento;
	}

    @Override
    public void encerrarConexao() throws ExcecaoDAO {
        try {
            this.conexao.close();
        } catch (SQLException e) {
            throw new ExcecaoDAO("pagamaneto_dao.nao_foi_possivel_encerrar_a_conexao");
        }  
    }
}
